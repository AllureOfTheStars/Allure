# This Travis job script has been generated by a script via
#
#   runghc make_travis_yml_2.hs '--no-no-tests-no-bench' '--osx=8.4.4' 'cabal.project' '-o' 'foo'
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
language: c
#sudo: false
dist: trusty
sudo: required

git:
  submodules: false  # whether to recursively clone submodules

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store
    - $HOME/.ghc-install

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal new-update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx

  - rm -rfv $HOME/.cabal/packages/head.hackage

matrix:
  include:
    - env: GTKVTY=brew-sdl2-osx
      compiler: "ghc-8.6.4"
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.4,ghc-8.6.4], sources: [hvr-ghc]}}
      os: osx

before_install:
  - HC=${CC}
  - HCPKG=${HC/ghc/ghc-pkg}
  - unset CC
  - pwd
  - ROOTDIR=$(pwd)
  - mkdir -p $HOME/.local/bin
  - "if [ \"$(uname)\" != \"Darwin\" ]; then sudo apt-get update; fi"
  - "if [ \"$(uname)\" = \"Darwin\" ]; then brew update; brew upgrade python@3; curl https://haskell.futurice.com/haskell-on-macos.py | python3 - --make-dirs --install-dir=$HOME/.ghc-install --cabal-alias=head install cabal-install-head ${HC}; fi"
  - "if [ \"$(uname)\" = \"Darwin\" ]; then PATH=$HOME/.ghc-install/ghc/bin:$HOME/local/bin:$PATH; else PATH=/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$HOME/local/bin:$PATH; fi"
  - HCNUMVER=$(( $(${HC} --numeric-version|sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+).*/\1 * 10000 + \2 * 100 + \3/') ))
  - echo $HCNUMVER

install:
  - cabal --version
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - BENCH=${BENCH---enable-benchmarks}
  - TEST=${TEST---enable-tests}
  - HADDOCK=${HADDOCK-true}
  - NOINSTALLEDCONSTRAINTS=${NOINSTALLEDCONSTRAINTS-false}
  - GHCHEAD=${GHCHEAD-false}
  - if [ -f "./configure.ac" ]; then
      (cd "." && autoreconf -i);
    fi
  - rm -f cabal.project.freeze
  - rm -rf .ghc.environment.* "."/dist
  - DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
  # test that source-distributions can be generated
  - (cd "." && cabal sdist)
  - mv "."/dist/Allure-*.tar.gz ${DISTDIR}/
  - cd ${DISTDIR} || false
  - find . -maxdepth 1 -name '*.tar.gz' -exec tar -xvf '{}' \;

  - "if [[ $GTKVTY != \"brew-sdl2-osx\" ]] ; then git clone --depth=50 --branch=master git://github.com/LambdaHack/LambdaHack.git; fi"
  - cd Allure-*
  - travis_retry cabal new-update -v
  - "sed -i.bak 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config"
  - grep -Ev -- '^\s*--' ${HOME}/.cabal/config | grep -Ev '^\s*$'

  - cp $ROOTDIR/cabal.project.LH.dir cabal.project
  - cp $ROOTDIR/Makefile .
  - cat cabal.project || true
  - cat cabal.project.local || true

  - |
    if [ $GTKVTY = "gtk" ]; then
      cabal new-build --only-dependencies -fgtk -w ${HC} -j2 .;
      cabal new-build -fgtk -w ${HC} ${TEST} ${BENCH} -j1 .;
    elif [ $GTKVTY = "gtk-v2" ]; then
      cabal new-build --only-dependencies -fgtk -w ${HC} -j2 .;
      cabal new-build -v2 -fgtk -w ${HC} ${TEST} ${BENCH} -j1 .;
    elif [ $GTKVTY = "sdl" ]; then
      cabal new-build --only-dependencies -fsdl -w ${HC} -j2 .;
      cabal new-build -fsdl -w ${HC} ${TEST} ${BENCH} -j1 .;
    elif [ $GTKVTY = "sdl-v2" ]; then
      cabal new-build --only-dependencies -fsdl -w ${HC} -j2 .;
      cabal new-build -v2 -fsdl -w ${HC} ${TEST} ${BENCH} -j1 .;
    elif [ $GTKVTY = "vty" ]; then
      cabal new-build --only-dependencies -fvty -w ${HC} -j2 .;
      cabal new-build -fvty -w ${HC} ${TEST} ${BENCH} -j1 .;
    elif [ $GTKVTY = "curses" ]; then
      cabal new-build --only-dependencies -fcurses -f-release -w ${HC} -j2 .;
      cabal new-build -fcurses -f-release -w ${HC} ${TEST} ${BENCH} -j1 .;
    elif [ $GTKVTY = "noopt" ]; then
      cabal new-build --only-dependencies -fvty --ghc-options="-O0 -fno-ignore-asserts" -w ${HC} -j2 .;
      cabal new-build -fvty --ghc-options="-O0 -fno-ignore-asserts" -w ${HC} ${TEST} ${BENCH} -j1 .;
    elif [ $GTKVTY = "opt2" ]; then
      cabal new-build --only-dependencies -fcurses --ghc-options="-O2 -fno-ignore-asserts" -w ${HC} -j2 .;
      cabal new-build -fcurses --ghc-options="-O2 -fno-ignore-asserts" -w ${HC} ${TEST} ${BENCH} -j1 .;
    elif [ $GTKVTY = "asserts" ]; then
      cabal new-build --only-dependencies -fvty -fwith_expensive_assertions -w ${HC} -j2 .;
      cabal new-build -fvty -fwith_expensive_assertions -w ${HC} ${TEST} ${BENCH} -j1 .;
    elif [ $GTKVTY = "asserts_noopt" ]; then
      cabal new-build --only-dependencies -fcurses -fwith_expensive_assertions --ghc-options="-O0 -fno-ignore-asserts" -w ${HC} -j2 .;
      cabal new-build -fcurses -fwith_expensive_assertions --ghc-options="-O0 -fno-ignore-asserts" -w ${HC} ${TEST} ${BENCH} -j1 .;
    elif [ $GTKVTY = "asserts_opt2" ]; then
      cabal new-build --only-dependencies -fvty -fwith_expensive_assertions --ghc-options="-O2 -fno-ignore-asserts" -w ${HC} -j2 .;
      cabal new-build -fvty -fwith_expensive_assertions --ghc-options="-O2 -fno-ignore-asserts" -w ${HC} ${TEST} ${BENCH} -j1 .;
    elif [ $GTKVTY = "brew-sdl2-osx" ]; then
      travis_wait 30 brew install --build-from-source AllureOfTheStars/allure/allureofthestars &&
      cat /private/tmp/homebrew20190422-*.sb &&
      /usr/local/Cellar/allureofthestars/0.9.4.0/bin/Allure --dbgMsgSer --newGame 3 --maxFps 100000 --frontendNull --stopAfterFrames 2 --automateAll --keepAutomated --gameMode battle --setDungeonRng 7 --setMainRng 7 --benchmark &&
      travis_wait 30 brew test --verbose --debug AllureOfTheStars/allure/allureofthestars &&
      cat /private/tmp/homebrew20190422-*.sb
    elif [ $GTKVTY = "asserts-osx" ]; then
      cabal new-build --only-dependencies -fvty -fwith_expensive_assertions -w ${HC} -j2 .;
      cabal new-build -fvty -fwith_expensive_assertions -w ${HC} ${TEST} ${BENCH} -j1 .;
    elif [ $GTKVTY = "asserts-osx_noopt" ]; then
      cabal new-build --only-dependencies -fcurses -fwith_expensive_assertions --ghc-options="-O0 -fno-ignore-asserts" -w ${HC} -j2 .;
      cabal new-build -fcurses -fwith_expensive_assertions --ghc-options="-O0 -fno-ignore-asserts" -w ${HC} ${TEST} ${BENCH} -j1 .;
    else exit 7;
    fi

  - ROOTDIR2=$(pwd)
  - mkdir -p dist/build/Allure
  - find dist-newstyle -wholename '*/build/test/test' -exec '{}' \;
  - find dist-newstyle -wholename '*/build/Allure/Allure' -exec cp '{}' $ROOTDIR2/dist/build/Allure/ \;

  - touch /tmp/teletypetest.log;
  - "if [[ $GTKVTY != \"brew-sdl2-osx\" ]] ; then (make test-travis || (tail -n 2000 /tmp/teletypetest.log ; exit 77)); fi"
  - "if [ \"$(uname)\" != \"Darwin\" ]; then (make testDefense-medium || (tail -n 2000 /tmp/teletypetest.log ; exit 77)); fi"

# REGENDATA ["--no-no-tests-no-bench","--osx=8.4.4","cabal.project","-o","foo"]
# EOF
