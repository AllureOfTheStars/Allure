# This file has been generated -- see https://github.com/hvr/multi-ghc-travis
language: c
sudo: false

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/c71e2e76766b0cdc272c
    on_success: change  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_start: never     # options: [always|never|change] default: always

cache:
  directories:
    - $HOME/.cabsnap
    - $HOME/.cabal/packages

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.tar

matrix:
  include:
    - env: CABALVER=1.24 GHCVER=8.0.1 GTKVTY=noopt
      compiler: ": #GHC 8.0.1"
      addons: {apt: {packages: [libgtk-3-dev, cabal-install-1.24,ghc-8.0.1,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.24 GHCVER=8.0.1 GTKVTY=opt2
      compiler: ": #GHC 8.0.1"
      addons: {apt: {packages: [libgtk-3-dev, cabal-install-1.24,ghc-8.0.1,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.24 GHCVER=8.0.1 GTKVTY=asserts
      compiler: ": #GHC 8.0.1"
      addons: {apt: {packages: [libgtk-3-dev, cabal-install-1.24,ghc-8.0.1,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.24 GHCVER=8.0.1 GTKVTY=vty
      compiler: ": #GHC 8.0.1"
      addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.1,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.24 GHCVER=8.0.1 GTKVTY=curses
      compiler: ": #GHC 8.0.1"
      addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.1,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.24 GHCVER=8.0.1 GTKVTY=gtk
      compiler: ": #GHC 8.0.1"
      addons: {apt: {packages: [libgtk-3-dev, cabal-install-1.24,ghc-8.0.1,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}

    - env: CABALVER=1.24 GHCVER=8.0.2 GTKVTY=noopt
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [libgtk-3-dev, cabal-install-1.24,ghc-8.0.2,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.24 GHCVER=8.0.2 GTKVTY=opt2
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [libgtk-3-dev, cabal-install-1.24,ghc-8.0.2,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.24 GHCVER=8.0.2 GTKVTY=asserts
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [libgtk-3-dev, cabal-install-1.24,ghc-8.0.2,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.24 GHCVER=8.0.2 GTKVTY=vty
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.2,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.24 GHCVER=8.0.2 GTKVTY=curses
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.2,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.24 GHCVER=8.0.2 GTKVTY=gtk
      compiler: ": #GHC 8.0.2"
      addons: {apt: {packages: [libgtk-3-dev, cabal-install-1.24,ghc-8.0.2,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}

    - env: CABALVER=1.24 GHCVER=7.10.1 GTKVTY=vty
      compiler: ": #GHC 7.10.1"
      addons: {apt: {packages: [cabal-install-1.24,ghc-7.10.1,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.24 GHCVER=7.10.2 GTKVTY=curses
      compiler: ": #GHC 7.10.2"
      addons: {apt: {packages: [cabal-install-1.24,ghc-7.10.2,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.24 GHCVER=7.10.3 GTKVTY=gtk
      compiler: ": #GHC 7.10.3"
      addons: {apt: {packages: [libgtk-3-dev, cabal-install-1.24,ghc-7.10.3,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}

    - env: CABALVER=head GHCVER=head GTKVTY=gtk-v2
      compiler: ": #GHC head"
      addons: {apt: {packages: [libgtk-3-dev, cabal-install-head,ghc-head,happy-1.19.5,alex-3.1.4], sources: [hvr-ghc]}}

  allow_failures:
    - env: CABALVER=head GHCVER=head GTKVTY=gtk-v2

before_install:
 - unset CC
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH
 - export PATH=/opt/alex/3.1.4/bin:/opt/happy/1.19.5/bin:$PATH
 - ld --version

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - if [ -f $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz ];
   then
     zcat $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz >
          $HOME/.cabal/packages/hackage.haskell.org/00-index.tar;
   fi
 - travis_retry cabal update -v
 - sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config
 - echo "jobsColon 2" >> ${HOME}/.cabal/config
 - sed -i 's/^jobsColon/jobs:/' ${HOME}/.cabal/config
 - |
   cd ..
   git clone --depth=50 --branch=master git://github.com/LambdaHack/LambdaHack.git
   cd LambdaHack
   if [ $GTKVTY = "gtk" ]; then
     cabal install --enable-tests --enable-benchmarks --dry -v gtk2hs-buildtools > installplan.txt
     cabal install --enable-tests --enable-benchmarks --dry -v >> installplan.txt
   elif [ $GTKVTY = "gtk-v2" ]; then
     cabal install --enable-tests --enable-benchmarks --dry -v gtk2hs-buildtools > installplan.txt
     cabal install --enable-tests --enable-benchmarks --dry -v >> installplan.txt
   elif [ $GTKVTY = "vty" ]; then
     cabal install -fvty --enable-tests --enable-benchmarks --dry -v > installplan.txt
   elif [ $GTKVTY = "curses" ]; then
     cabal install -fcurses -frelease --enable-tests --enable-benchmarks --dry -v > installplan.txt # test -frelease together with the curses frontend
   elif [ $GTKVTY = "noopt" ]; then
     cabal install --enable-tests --enable-benchmarks --dry -v gtk2hs-buildtools > installplan.txt
     cabal install --enable-tests --enable-benchmarks --dry -v >> installplan.txt
   elif [ $GTKVTY = "opt2" ]; then
     cabal install --enable-tests --enable-benchmarks --dry -v gtk2hs-buildtools > installplan.txt
     cabal install --enable-tests --enable-benchmarks --dry -v >> installplan.txt
   elif [ $GTKVTY = "asserts" ]; then
     cabal install --enable-tests --enable-benchmarks --dry -v gtk2hs-buildtools > installplan.txt
     cabal install --enable-tests --enable-benchmarks --dry -v >> installplan.txt
   else exit 7
   fi

 - sed -i -e '1,/^Resolving /d' installplan.txt; cat installplan.txt

# check whether current requested install-plan matches cached package-db snapshot
 - if diff -u installplan.txt $HOME/.cabsnap/installplan.txt;
   then
     echo "cabal build-cache HIT";
     rm -rfv .ghc;
     cp -a $HOME/.cabsnap/ghc $HOME/.ghc;
     cp -a $HOME/.cabsnap/lib $HOME/.cabsnap/share $HOME/.cabsnap/bin $HOME/.cabal/;
   else
     echo "cabal build-cache MISS";
     rm -rf $HOME/.cabsnap;
     mkdir -p $HOME/.ghc $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin;
     if [ $GTKVTY = "gtk" ]; then
       cabal install gtk2hs-buildtools;
       cabal install --enable-tests --enable-benchmarks;
     elif [ $GTKVTY = "gtk-v2" ]; then
       cabal install -v2 gtk2hs-buildtools;
       cabal install -v2 --enable-tests --enable-benchmarks;
     elif [ $GTKVTY = "vty" ]; then
       cabal install -fvty --enable-tests --enable-benchmarks;
     elif [ $GTKVTY = "curses" ]; then
       cabal install -fcurses -frelease --enable-tests --enable-benchmarks;
     elif [ $GTKVTY = "noopt" ]; then
       cabal install gtk2hs-buildtools;
       cabal install --enable-tests --enable-benchmarks;
     elif [ $GTKVTY = "opt2" ]; then
       cabal install gtk2hs-buildtools;
       cabal install --enable-tests --enable-benchmarks;
     elif [ $GTKVTY = "asserts" ]; then
       cabal install gtk2hs-buildtools;
       cabal install --enable-tests --enable-benchmarks;
     else exit 7;
     fi
   fi

# snapshot package-db on cache miss
 - if [ ! -d $HOME/.cabsnap ];
   then
      echo "snapshotting package-db to build-cache";
      mkdir $HOME/.cabsnap;
      cp -a $HOME/.ghc $HOME/.cabsnap/ghc;
      cp -a $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin installplan.txt $HOME/.cabsnap/;
   fi

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi

 - |
   cd ../Allure
   if [ $GTKVTY = "gtk" ]; then
     cabal configure --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
   elif [ $GTKVTY = "gtk-v2" ]; then
        cabal configure --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
   elif [ $GTKVTY = "vty" ]; then
     cabal configure -fvty --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
   elif [ $GTKVTY = "curses" ]; then
     cabal configure -fcurses -frelease --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
   elif [ $GTKVTY = "noopt" ]; then
     cabal configure --ghc-options="-O0 -fno-ignore-asserts" --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
   elif [ $GTKVTY = "opt2" ]; then
     cabal configure --ghc-options="-O2 -fno-ignore-asserts" --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
   elif [ $GTKVTY = "asserts" ]; then
     cabal configure -fwith_expensive_assertions --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
   else exit 7
   fi

 - cabal build   # this builds our library and executables (including tests/benchmarks)

 - (cabal test || exit 7);

 # tests that a source-distribution is correct; ignore -O2 warning
 - cabal check || true

 # tests that a source-distribution can be generated; ignore -O2 warning
 - cabal sdist || true

 # check that the generated source-distribution can be built & installed
 - export SRC_TGZ=$(cabal info . | awk '{print $2 ".tar.gz";exit}');
   cd dist/;
   if [ -f "$SRC_TGZ" ]; then
      if [ $GTKVTY = "gtk" ]; then
        cabal install "$SRC_TGZ";
      elif [ $GTKVTY = "gtk-v2" ]; then
        cabal install "$SRC_TGZ";
      elif [ $GTKVTY = "vty" ]; then
        cabal install -fvty "$SRC_TGZ";
      elif [ $GTKVTY = "curses" ]; then
        cabal install -fcurses "$SRC_TGZ";
      else
        cabal install "$SRC_TGZ";
      fi;
   else
      echo "expected '$SRC_TGZ' not found";
      exit 1;
   fi &&
   cd ..

 - touch /tmp/stdtest.log;
 - (make test-travis-medium || (tail -n 200 /tmp/stdtest.log ; exit 77));

# EOF
