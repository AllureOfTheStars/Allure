; This is the default config file, included in the binary itself.
; The game looks for the user config file in ~/.Allure/config.
; We restricts the config file format by insisting that
; options are case-sensitive and permitting only ';' comments.

; If you contribute to the game, please create directory ~/.Allure/
; as described in README.md. In this way, you will not accidentally
; commit your private high scores (nor your save files) to the game
; git repository.

[dungeon]
; fixed caves for the first levels, then randomly picked caves
LambdaCave_1: caveRogue
LambdaCave_10: caveNoise
LambdaCave_20: caveArena
LambdaCave_30: caveEmpty
depth: 30

[engine]
fovMode: digital
;fovMode: permissive
;fovMode: shadow
fovRadius: 10
;startingRandomGenerator: 42
;dungeonRandomGenerator: 42

; paths to various game files; relative to ~/.Allure/
; (or analogous prefixes for other OSes, see getAppUserDataDirectory)
[files]
highScores: scores
saveGame: save

[heroes]
HeroName_0: you
HeroName_1: Haskell Alvin
HeroName_2: Alonzo Barkley
HeroName_3: Ernst Abraham
HeroName_4: Samuel Saunders
HeroName_5: Roger Robin
baseHP: 50
extraHeroes: 1
firstDeathEnds: False

[commands]
; interaction with the dungeon
c: TriggerDir { verb = "close", object = "door", feature = Closable }
less:    TriggerTile { verb = "ascend", object = "level", feature = Cause Ascend }
greater: TriggerTile { verb = "descend", object = "level", feature = Cause Descend }
bracketleft:  TgtAscend 1
bracketright: TgtAscend (-1)
braceleft:    TgtAscend 10
braceright:   TgtAscend (-10)
slash: TgtFloor
asterisk: TgtEnemy
Tab: HeroCycle
;
; items
g: Pickup
d: Drop
i: Inventory
a: Apply { verb = "apply", object = "applicable", syms = "!?" }
p: Project { verb = "project", object = "projectable", syms = "/|" }
;
; saving or ending the game
X: GameSave
Q: GameQuit
;
;information for the player
P: History
V: Version
question: Help
D: CfgDump
;
; general
period: Wait
Escape: Cancel
Return: Accept

[macros]
; This sections can be empty, but has to be there.
; TODO: the following does not work yet:
; ; throw a dart at the closest monster
; t: asterisk Return t Return
; TODO: in gtk it could be implemented via unGetChan,
; unless we prefer an explicit command queue, with flushing, etc.
;
; Handy with Vi keys:
comma: g

[monsters]
smellTimeout: 1000

[ui]
historyMax: 500
